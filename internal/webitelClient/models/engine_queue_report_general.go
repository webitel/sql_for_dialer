// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineQueueReportGeneral engine queue report general
//
// swagger:model engineQueueReportGeneral
type EngineQueueReportGeneral struct {

	// abandoned
	Abandoned int64 `json:"abandoned,omitempty"`

	// agent status
	AgentStatus *EngineQueueReportGeneralAgentStatus `json:"agent_status,omitempty"`

	// attempts
	Attempts int64 `json:"attempts,omitempty"`

	// avg aht sec
	AvgAhtSec float32 `json:"avg_aht_sec,omitempty"`

	// avg asa sec
	AvgAsaSec float32 `json:"avg_asa_sec,omitempty"`

	// avg awt sec
	AvgAwtSec float32 `json:"avg_awt_sec,omitempty"`

	// avg wrap sec
	AvgWrapSec float32 `json:"avg_wrap_sec,omitempty"`

	// bridged
	Bridged float32 `json:"bridged,omitempty"`

	// count
	Count string `json:"count,omitempty"`

	// missed
	Missed int64 `json:"missed,omitempty"`

	// processed
	Processed int64 `json:"processed,omitempty"`

	// queue
	Queue *EngineLookup `json:"queue,omitempty"`

	// sum bill sec
	SumBillSec float32 `json:"sum_bill_sec,omitempty"`

	// team
	Team *EngineLookup `json:"team,omitempty"`

	// transferred
	Transferred int64 `json:"transferred,omitempty"`

	// waiting
	Waiting int64 `json:"waiting,omitempty"`
}

// Validate validates this engine queue report general
func (m *EngineQueueReportGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineQueueReportGeneral) validateAgentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentStatus) { // not required
		return nil
	}

	if m.AgentStatus != nil {
		if err := m.AgentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent_status")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueueReportGeneral) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueueReportGeneral) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine queue report general based on the context it is used
func (m *EngineQueueReportGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineQueueReportGeneral) contextValidateAgentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentStatus != nil {
		if err := m.AgentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent_status")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueueReportGeneral) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {
		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueueReportGeneral) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {
		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineQueueReportGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineQueueReportGeneral) UnmarshalBinary(b []byte) error {
	var res EngineQueueReportGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
