// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineQueue engine queue
//
// swagger:model engineQueue
type EngineQueue struct {

	// active
	Active int32 `json:"active,omitempty"`

	// after schema
	AfterSchema *EngineLookup `json:"after_schema,omitempty"`

	// calendar
	Calendar *EngineLookup `json:"calendar,omitempty"`

	// count
	Count int32 `json:"count,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy *EngineLookup `json:"created_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dnc list
	DncList *EngineLookup `json:"dnc_list,omitempty"`

	// do schema
	DoSchema *EngineLookup `json:"do_schema,omitempty"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// payload
	Payload interface{} `json:"payload,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// processing
	Processing bool `json:"processing,omitempty"`

	// processing renewal sec
	ProcessingRenewalSec int64 `json:"processing_renewal_sec,omitempty"`

	// processing sec
	ProcessingSec int64 `json:"processing_sec,omitempty"`

	// ringtone
	Ringtone *EngineLookup `json:"ringtone,omitempty"`

	// schema
	Schema *EngineLookup `json:"schema,omitempty"`

	// sec locate agent
	SecLocateAgent int32 `json:"sec_locate_agent,omitempty"`

	// sticky agent
	StickyAgent bool `json:"sticky_agent,omitempty"`

	// strategy
	Strategy string `json:"strategy,omitempty"`

	// team
	Team *EngineLookup `json:"team,omitempty"`

	// timeout
	Timeout int32 `json:"timeout,omitempty"`

	// type
	Type int32 `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy *EngineLookup `json:"updated_by,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`

	// waiting
	Waiting int32 `json:"waiting,omitempty"`
}

// Validate validates this engine queue
func (m *EngineQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfterSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalendar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDncList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRingtone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineQueue) validateAfterSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.AfterSchema) { // not required
		return nil
	}

	if m.AfterSchema != nil {
		if err := m.AfterSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("after_schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateCalendar(formats strfmt.Registry) error {
	if swag.IsZero(m.Calendar) { // not required
		return nil
	}

	if m.Calendar != nil {
		if err := m.Calendar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calendar")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateDncList(formats strfmt.Registry) error {
	if swag.IsZero(m.DncList) { // not required
		return nil
	}

	if m.DncList != nil {
		if err := m.DncList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnc_list")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateDoSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.DoSchema) { // not required
		return nil
	}

	if m.DoSchema != nil {
		if err := m.DoSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("do_schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateRingtone(formats strfmt.Registry) error {
	if swag.IsZero(m.Ringtone) { // not required
		return nil
	}

	if m.Ringtone != nil {
		if err := m.Ringtone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ringtone")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine queue based on the context it is used
func (m *EngineQueue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAfterSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalendar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDncList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDoSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRingtone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineQueue) contextValidateAfterSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.AfterSchema != nil {
		if err := m.AfterSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("after_schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateCalendar(ctx context.Context, formats strfmt.Registry) error {

	if m.Calendar != nil {
		if err := m.Calendar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calendar")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateDncList(ctx context.Context, formats strfmt.Registry) error {

	if m.DncList != nil {
		if err := m.DncList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnc_list")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateDoSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.DoSchema != nil {
		if err := m.DoSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("do_schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateRingtone(ctx context.Context, formats strfmt.Registry) error {

	if m.Ringtone != nil {
		if err := m.Ringtone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ringtone")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.Schema != nil {
		if err := m.Schema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {
		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineQueue) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineQueue) UnmarshalBinary(b []byte) error {
	var res EngineQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
