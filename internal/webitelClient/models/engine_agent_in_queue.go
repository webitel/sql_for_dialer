// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineAgentInQueue engine agent in queue
//
// swagger:model engineAgentInQueue
type EngineAgentInQueue struct {

	// active members
	ActiveMembers int32 `json:"active_members,omitempty"`

	// count members
	CountMembers int32 `json:"count_members,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// queue
	Queue *EngineLookup `json:"queue,omitempty"`

	// strategy
	Strategy string `json:"strategy,omitempty"`

	// type
	Type int32 `json:"type,omitempty"`

	// waiting members
	WaitingMembers int32 `json:"waiting_members,omitempty"`
}

// Validate validates this engine agent in queue
func (m *EngineAgentInQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAgentInQueue) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine agent in queue based on the context it is used
func (m *EngineAgentInQueue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAgentInQueue) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {
		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineAgentInQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineAgentInQueue) UnmarshalBinary(b []byte) error {
	var res EngineAgentInQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
