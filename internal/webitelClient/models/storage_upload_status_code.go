// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageUploadStatusCode storage upload status code
//
// swagger:model storageUploadStatusCode
type StorageUploadStatusCode string

func NewStorageUploadStatusCode(value StorageUploadStatusCode) *StorageUploadStatusCode {
	v := value
	return &v
}

const (

	// StorageUploadStatusCodeUnknown captures enum value "Unknown"
	StorageUploadStatusCodeUnknown StorageUploadStatusCode = "Unknown"

	// StorageUploadStatusCodeOk captures enum value "Ok"
	StorageUploadStatusCodeOk StorageUploadStatusCode = "Ok"

	// StorageUploadStatusCodeFailed captures enum value "Failed"
	StorageUploadStatusCodeFailed StorageUploadStatusCode = "Failed"
)

// for schema
var storageUploadStatusCodeEnum []interface{}

func init() {
	var res []StorageUploadStatusCode
	if err := json.Unmarshal([]byte(`["Unknown","Ok","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageUploadStatusCodeEnum = append(storageUploadStatusCodeEnum, v)
	}
}

func (m StorageUploadStatusCode) validateStorageUploadStatusCodeEnum(path, location string, value StorageUploadStatusCode) error {
	if err := validate.EnumCase(path, location, value, storageUploadStatusCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage upload status code
func (m StorageUploadStatusCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageUploadStatusCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage upload status code based on context it is used
func (m StorageUploadStatusCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
