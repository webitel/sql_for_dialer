// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineOutboundResourceViewGroup engine outbound resource view group
//
// swagger:model engineOutboundResourceViewGroup
type EngineOutboundResourceViewGroup struct {

	// communication
	Communication *EngineLookup `json:"communication,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// strategy
	Strategy string `json:"strategy,omitempty"`
}

// Validate validates this engine outbound resource view group
func (m *EngineOutboundResourceViewGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineOutboundResourceViewGroup) validateCommunication(formats strfmt.Registry) error {
	if swag.IsZero(m.Communication) { // not required
		return nil
	}

	if m.Communication != nil {
		if err := m.Communication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine outbound resource view group based on the context it is used
func (m *EngineOutboundResourceViewGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommunication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineOutboundResourceViewGroup) contextValidateCommunication(ctx context.Context, formats strfmt.Registry) error {

	if m.Communication != nil {
		if err := m.Communication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineOutboundResourceViewGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineOutboundResourceViewGroup) UnmarshalBinary(b []byte) error {
	var res EngineOutboundResourceViewGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
