// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineAgent engine agent
//
// swagger:model engineAgent
type EngineAgent struct {

	// allow channels
	AllowChannels []string `json:"allow_channels"`

	// auditor
	Auditor *EngineLookup `json:"auditor,omitempty"`

	// channel
	Channel *EngineAgentChannel `json:"channel,omitempty"`

	// chat count
	ChatCount int64 `json:"chat_count,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// greeting media
	GreetingMedia *EngineLookup `json:"greeting_media,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is supervisor
	IsSupervisor bool `json:"is_supervisor,omitempty"`

	// last status change
	LastStatusChange string `json:"last_status_change,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// progressive count
	ProgressiveCount int32 `json:"progressive_count,omitempty"`

	// region
	Region *EngineLookup `json:"region,omitempty"`

	// skills
	Skills []*EngineLookup `json:"skills"`

	// status
	Status string `json:"status,omitempty"`

	// status duration
	StatusDuration string `json:"status_duration,omitempty"`

	// supervisor
	Supervisor *EngineLookup `json:"supervisor,omitempty"`

	// team
	Team *EngineLookup `json:"team,omitempty"`

	// user
	User *EngineLookup `json:"user,omitempty"`
}

// Validate validates this engine agent
func (m *EngineAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGreetingMedia(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupervisor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAgent) validateAuditor(formats strfmt.Registry) error {
	if swag.IsZero(m.Auditor) { // not required
		return nil
	}

	if m.Auditor != nil {
		if err := m.Auditor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditor")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateGreetingMedia(formats strfmt.Registry) error {
	if swag.IsZero(m.GreetingMedia) { // not required
		return nil
	}

	if m.GreetingMedia != nil {
		if err := m.GreetingMedia.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting_media")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateSkills(formats strfmt.Registry) error {
	if swag.IsZero(m.Skills) { // not required
		return nil
	}

	for i := 0; i < len(m.Skills); i++ {
		if swag.IsZero(m.Skills[i]) { // not required
			continue
		}

		if m.Skills[i] != nil {
			if err := m.Skills[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineAgent) validateSupervisor(formats strfmt.Registry) error {
	if swag.IsZero(m.Supervisor) { // not required
		return nil
	}

	if m.Supervisor != nil {
		if err := m.Supervisor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supervisor")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine agent based on the context it is used
func (m *EngineAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGreetingMedia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupervisor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAgent) contextValidateAuditor(ctx context.Context, formats strfmt.Registry) error {

	if m.Auditor != nil {
		if err := m.Auditor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditor")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.Channel != nil {
		if err := m.Channel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateGreetingMedia(ctx context.Context, formats strfmt.Registry) error {

	if m.GreetingMedia != nil {
		if err := m.GreetingMedia.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting_media")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {
		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateSkills(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Skills); i++ {

		if m.Skills[i] != nil {
			if err := m.Skills[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineAgent) contextValidateSupervisor(ctx context.Context, formats strfmt.Registry) error {

	if m.Supervisor != nil {
		if err := m.Supervisor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supervisor")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {
		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAgent) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineAgent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineAgent) UnmarshalBinary(b []byte) error {
	var res EngineAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
