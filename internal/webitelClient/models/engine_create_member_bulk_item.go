// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineCreateMemberBulkItem engine create member bulk item
//
// swagger:model engineCreateMemberBulkItem
type EngineCreateMemberBulkItem struct {

	// agent
	Agent *EngineLookup `json:"agent,omitempty"`

	// bucket
	Bucket *EngineLookup `json:"bucket,omitempty"`

	// communications
	Communications []*EngineMemberCommunicationCreateRequest `json:"communications"`

	// expire at
	ExpireAt string `json:"expire_at,omitempty"`

	// min offering at
	MinOfferingAt string `json:"min_offering_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// skill
	Skill *EngineLookup `json:"skill,omitempty"`

	// timezone
	Timezone *EngineLookup `json:"timezone,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`
}

// Validate validates this engine create member bulk item
func (m *EngineCreateMemberBulkItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineCreateMemberBulkItem) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) validateBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.Bucket) { // not required
		return nil
	}

	if m.Bucket != nil {
		if err := m.Bucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) validateCommunications(formats strfmt.Registry) error {
	if swag.IsZero(m.Communications) { // not required
		return nil
	}

	for i := 0; i < len(m.Communications); i++ {
		if swag.IsZero(m.Communications[i]) { // not required
			continue
		}

		if m.Communications[i] != nil {
			if err := m.Communications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCreateMemberBulkItem) validateSkill(formats strfmt.Registry) error {
	if swag.IsZero(m.Skill) { // not required
		return nil
	}

	if m.Skill != nil {
		if err := m.Skill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("skill")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) validateTimezone(formats strfmt.Registry) error {
	if swag.IsZero(m.Timezone) { // not required
		return nil
	}

	if m.Timezone != nil {
		if err := m.Timezone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine create member bulk item based on the context it is used
func (m *EngineCreateMemberBulkItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkill(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineCreateMemberBulkItem) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) contextValidateBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.Bucket != nil {
		if err := m.Bucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) contextValidateCommunications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Communications); i++ {

		if m.Communications[i] != nil {
			if err := m.Communications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCreateMemberBulkItem) contextValidateSkill(ctx context.Context, formats strfmt.Registry) error {

	if m.Skill != nil {
		if err := m.Skill.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("skill")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCreateMemberBulkItem) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if m.Timezone != nil {
		if err := m.Timezone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineCreateMemberBulkItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineCreateMemberBulkItem) UnmarshalBinary(b []byte) error {
	var res EngineCreateMemberBulkItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
