// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineCalendar engine calendar
//
// swagger:model engineCalendar
type EngineCalendar struct {

	// accepts
	Accepts []*EngineAcceptOfDay `json:"accepts"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy *EngineLookup `json:"created_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// end at
	EndAt string `json:"end_at,omitempty"`

	// excepts
	Excepts []*EngineExceptDate `json:"excepts"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start at
	StartAt string `json:"start_at,omitempty"`

	// timezone
	Timezone *EngineLookup `json:"timezone,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy *EngineLookup `json:"updated_by,omitempty"`
}

// Validate validates this engine calendar
func (m *EngineCalendar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccepts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcepts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineCalendar) validateAccepts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accepts) { // not required
		return nil
	}

	for i := 0; i < len(m.Accepts); i++ {
		if swag.IsZero(m.Accepts[i]) { // not required
			continue
		}

		if m.Accepts[i] != nil {
			if err := m.Accepts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCalendar) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCalendar) validateExcepts(formats strfmt.Registry) error {
	if swag.IsZero(m.Excepts) { // not required
		return nil
	}

	for i := 0; i < len(m.Excepts); i++ {
		if swag.IsZero(m.Excepts[i]) { // not required
			continue
		}

		if m.Excepts[i] != nil {
			if err := m.Excepts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCalendar) validateTimezone(formats strfmt.Registry) error {
	if swag.IsZero(m.Timezone) { // not required
		return nil
	}

	if m.Timezone != nil {
		if err := m.Timezone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCalendar) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine calendar based on the context it is used
func (m *EngineCalendar) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccepts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcepts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineCalendar) contextValidateAccepts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Accepts); i++ {

		if m.Accepts[i] != nil {
			if err := m.Accepts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCalendar) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCalendar) contextValidateExcepts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Excepts); i++ {

		if m.Excepts[i] != nil {
			if err := m.Excepts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineCalendar) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if m.Timezone != nil {
		if err := m.Timezone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

func (m *EngineCalendar) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineCalendar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineCalendar) UnmarshalBinary(b []byte) error {
	var res EngineCalendar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
