// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineAggregateHistoryCallRequest engine aggregate history call request
//
// swagger:model engineAggregateHistoryCallRequest
type EngineAggregateHistoryCallRequest struct {

	// agent id
	AgentID []string `json:"agent_id"`

	// aggs
	Aggs []*EngineAggregateRequest `json:"aggs"`

	// answered at
	AnsweredAt *EngineFilterBetween `json:"answered_at,omitempty"`

	// cause
	Cause []string `json:"cause"`

	// created at
	CreatedAt *EngineFilterBetween `json:"created_at,omitempty"`

	// dependency id
	DependencyID []string `json:"dependency_id"`

	// direction
	Direction []string `json:"direction"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// duration
	Duration *EngineFilterBetween `json:"duration,omitempty"`

	// gateway id
	GatewayID []string `json:"gateway_id"`

	// has file
	HasFile bool `json:"has_file,omitempty"`

	// id
	ID []string `json:"id"`

	// member id
	MemberID []string `json:"member_id"`

	// missed
	Missed bool `json:"missed,omitempty"`

	// number
	Number string `json:"number,omitempty"`

	// page
	Page int32 `json:"page,omitempty"`

	// parent id
	ParentID string `json:"parent_id,omitempty"`

	// q
	Q string `json:"q,omitempty"`

	// queue id
	QueueID []string `json:"queue_id"`

	// size
	Size int32 `json:"size,omitempty"`

	// skip parent
	SkipParent bool `json:"skip_parent,omitempty"`

	// stored at
	StoredAt *EngineFilterBetween `json:"stored_at,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// team id
	TeamID []string `json:"team_id"`

	// transfer from
	TransferFrom []string `json:"transfer_from"`

	// transfer to
	TransferTo []string `json:"transfer_to"`

	// user id
	UserID []string `json:"user_id"`
}

// Validate validates this engine aggregate history call request
func (m *EngineAggregateHistoryCallRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnsweredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAggregateHistoryCallRequest) validateAggs(formats strfmt.Registry) error {
	if swag.IsZero(m.Aggs) { // not required
		return nil
	}

	for i := 0; i < len(m.Aggs); i++ {
		if swag.IsZero(m.Aggs[i]) { // not required
			continue
		}

		if m.Aggs[i] != nil {
			if err := m.Aggs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) validateAnsweredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AnsweredAt) { // not required
		return nil
	}

	if m.AnsweredAt != nil {
		if err := m.AnsweredAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answered_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) validateStoredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StoredAt) { // not required
		return nil
	}

	if m.StoredAt != nil {
		if err := m.StoredAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored_at")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine aggregate history call request based on the context it is used
func (m *EngineAggregateHistoryCallRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnsweredAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoredAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineAggregateHistoryCallRequest) contextValidateAggs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aggs); i++ {

		if m.Aggs[i] != nil {
			if err := m.Aggs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) contextValidateAnsweredAt(ctx context.Context, formats strfmt.Registry) error {

	if m.AnsweredAt != nil {
		if err := m.AnsweredAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answered_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {
		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if m.Duration != nil {
		if err := m.Duration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *EngineAggregateHistoryCallRequest) contextValidateStoredAt(ctx context.Context, formats strfmt.Registry) error {

	if m.StoredAt != nil {
		if err := m.StoredAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored_at")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineAggregateHistoryCallRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineAggregateHistoryCallRequest) UnmarshalBinary(b []byte) error {
	var res EngineAggregateHistoryCallRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
