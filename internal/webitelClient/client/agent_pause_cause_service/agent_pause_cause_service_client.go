// Code generated by go-swagger; DO NOT EDIT.

package agent_pause_cause_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent pause cause service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent pause cause service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAgentPauseCause(params *CreateAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentPauseCauseOK, error)

	DeleteAgentPauseCause(params *DeleteAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error)

	PatchAgentPauseCause(params *PatchAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentPauseCauseOK, error)

	ReadAgentPauseCause(params *ReadAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentPauseCauseOK, error)

	SearchAgentPauseCause(params *SearchAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentPauseCauseOK, error)

	UpdateAgentPauseCause(params *UpdateAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAgentPauseCause create agent pause cause API
*/
func (a *Client) CreateAgentPauseCause(params *CreateAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgentPauseCause",
		Method:             "POST",
		PathPattern:        "/call_center/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgentPauseCause delete agent pause cause API
*/
func (a *Client) DeleteAgentPauseCause(params *DeleteAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgentPauseCause",
		Method:             "DELETE",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAgentPauseCause patch agent pause cause API
*/
func (a *Client) PatchAgentPauseCause(params *PatchAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgentPauseCause",
		Method:             "PATCH",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAgentPauseCause read agent pause cause API
*/
func (a *Client) ReadAgentPauseCause(params *ReadAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgentPauseCause",
		Method:             "GET",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentPauseCause search agent pause cause API
*/
func (a *Client) SearchAgentPauseCause(params *SearchAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentPauseCause",
		Method:             "GET",
		PathPattern:        "/call_center/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAgentPauseCause update agent pause cause API
*/
func (a *Client) UpdateAgentPauseCause(params *UpdateAgentPauseCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentPauseCause",
		Method:             "PUT",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAgentPauseCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAgentPauseCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
