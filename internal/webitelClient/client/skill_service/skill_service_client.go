// Code generated by go-swagger; DO NOT EDIT.

package skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSkill(params *CreateSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSkillOK, error)

	DeleteSkill(params *DeleteSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSkillOK, error)

	ReadSkill(params *ReadSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadSkillOK, error)

	SearchSkill(params *SearchSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSkillOK, error)

	UpdateSkill(params *UpdateSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSkill creates skill
*/
func (a *Client) CreateSkill(params *CreateSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSkill",
		Method:             "POST",
		PathPattern:        "/call_center/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSkill removes skill
*/
func (a *Client) DeleteSkill(params *DeleteSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadSkill skills item
*/
func (a *Client) ReadSkill(params *ReadSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadSkill",
		Method:             "GET",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchSkill lists of skill
*/
func (a *Client) SearchSkill(params *SearchSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchSkill",
		Method:             "GET",
		PathPattern:        "/call_center/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSkill updates skill
*/
func (a *Client) UpdateSkill(params *UpdateSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
