// Code generated by go-swagger; DO NOT EDIT.

package routing_schema_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// UpdateRoutingSchemaReader is a Reader for the UpdateRoutingSchema structure.
type UpdateRoutingSchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRoutingSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRoutingSchemaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateRoutingSchemaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRoutingSchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRoutingSchemaOK creates a UpdateRoutingSchemaOK with default headers values
func NewUpdateRoutingSchemaOK() *UpdateRoutingSchemaOK {
	return &UpdateRoutingSchemaOK{}
}

/* UpdateRoutingSchemaOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateRoutingSchemaOK struct {
	Payload *models.EngineRoutingSchema
}

func (o *UpdateRoutingSchemaOK) Error() string {
	return fmt.Sprintf("[PUT /routing/schema/{id}][%d] updateRoutingSchemaOK  %+v", 200, o.Payload)
}
func (o *UpdateRoutingSchemaOK) GetPayload() *models.EngineRoutingSchema {
	return o.Payload
}

func (o *UpdateRoutingSchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineRoutingSchema)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoutingSchemaForbidden creates a UpdateRoutingSchemaForbidden with default headers values
func NewUpdateRoutingSchemaForbidden() *UpdateRoutingSchemaForbidden {
	return &UpdateRoutingSchemaForbidden{}
}

/* UpdateRoutingSchemaForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type UpdateRoutingSchemaForbidden struct {
	Payload interface{}
}

func (o *UpdateRoutingSchemaForbidden) Error() string {
	return fmt.Sprintf("[PUT /routing/schema/{id}][%d] updateRoutingSchemaForbidden  %+v", 403, o.Payload)
}
func (o *UpdateRoutingSchemaForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateRoutingSchemaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoutingSchemaNotFound creates a UpdateRoutingSchemaNotFound with default headers values
func NewUpdateRoutingSchemaNotFound() *UpdateRoutingSchemaNotFound {
	return &UpdateRoutingSchemaNotFound{}
}

/* UpdateRoutingSchemaNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type UpdateRoutingSchemaNotFound struct {
	Payload string
}

func (o *UpdateRoutingSchemaNotFound) Error() string {
	return fmt.Sprintf("[PUT /routing/schema/{id}][%d] updateRoutingSchemaNotFound  %+v", 404, o.Payload)
}
func (o *UpdateRoutingSchemaNotFound) GetPayload() string {
	return o.Payload
}

func (o *UpdateRoutingSchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
