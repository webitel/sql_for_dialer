// Code generated by go-swagger; DO NOT EDIT.

package queue_skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchQueueSkillParams creates a new SearchQueueSkillParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchQueueSkillParams() *SearchQueueSkillParams {
	return &SearchQueueSkillParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchQueueSkillParamsWithTimeout creates a new SearchQueueSkillParams object
// with the ability to set a timeout on a request.
func NewSearchQueueSkillParamsWithTimeout(timeout time.Duration) *SearchQueueSkillParams {
	return &SearchQueueSkillParams{
		timeout: timeout,
	}
}

// NewSearchQueueSkillParamsWithContext creates a new SearchQueueSkillParams object
// with the ability to set a context for a request.
func NewSearchQueueSkillParamsWithContext(ctx context.Context) *SearchQueueSkillParams {
	return &SearchQueueSkillParams{
		Context: ctx,
	}
}

// NewSearchQueueSkillParamsWithHTTPClient creates a new SearchQueueSkillParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchQueueSkillParamsWithHTTPClient(client *http.Client) *SearchQueueSkillParams {
	return &SearchQueueSkillParams{
		HTTPClient: client,
	}
}

/* SearchQueueSkillParams contains all the parameters to send to the API endpoint
   for the search queue skill operation.

   Typically these are written to a http.Request.
*/
type SearchQueueSkillParams struct {

	// BucketID.
	BucketID []int64

	// Enabled.
	//
	// Format: boolean
	Enabled *bool

	// Fields.
	Fields []string

	// ID.
	ID []int64

	// Lvl.
	Lvl []int32

	// MaxCapacity.
	MaxCapacity []int32

	// MinCapacity.
	MinCapacity []int32

	// Page.
	//
	// Format: int32
	Page *int32

	// Q.
	Q *string

	// QueueID.
	//
	// Format: int64
	QueueID int64

	// Size.
	//
	// Format: int32
	Size *int32

	// SkillID.
	SkillID []int64

	// Sort.
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search queue skill params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchQueueSkillParams) WithDefaults() *SearchQueueSkillParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search queue skill params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchQueueSkillParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search queue skill params
func (o *SearchQueueSkillParams) WithTimeout(timeout time.Duration) *SearchQueueSkillParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search queue skill params
func (o *SearchQueueSkillParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search queue skill params
func (o *SearchQueueSkillParams) WithContext(ctx context.Context) *SearchQueueSkillParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search queue skill params
func (o *SearchQueueSkillParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search queue skill params
func (o *SearchQueueSkillParams) WithHTTPClient(client *http.Client) *SearchQueueSkillParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search queue skill params
func (o *SearchQueueSkillParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBucketID adds the bucketID to the search queue skill params
func (o *SearchQueueSkillParams) WithBucketID(bucketID []int64) *SearchQueueSkillParams {
	o.SetBucketID(bucketID)
	return o
}

// SetBucketID adds the bucketId to the search queue skill params
func (o *SearchQueueSkillParams) SetBucketID(bucketID []int64) {
	o.BucketID = bucketID
}

// WithEnabled adds the enabled to the search queue skill params
func (o *SearchQueueSkillParams) WithEnabled(enabled *bool) *SearchQueueSkillParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the search queue skill params
func (o *SearchQueueSkillParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithFields adds the fields to the search queue skill params
func (o *SearchQueueSkillParams) WithFields(fields []string) *SearchQueueSkillParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search queue skill params
func (o *SearchQueueSkillParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the search queue skill params
func (o *SearchQueueSkillParams) WithID(id []int64) *SearchQueueSkillParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search queue skill params
func (o *SearchQueueSkillParams) SetID(id []int64) {
	o.ID = id
}

// WithLvl adds the lvl to the search queue skill params
func (o *SearchQueueSkillParams) WithLvl(lvl []int32) *SearchQueueSkillParams {
	o.SetLvl(lvl)
	return o
}

// SetLvl adds the lvl to the search queue skill params
func (o *SearchQueueSkillParams) SetLvl(lvl []int32) {
	o.Lvl = lvl
}

// WithMaxCapacity adds the maxCapacity to the search queue skill params
func (o *SearchQueueSkillParams) WithMaxCapacity(maxCapacity []int32) *SearchQueueSkillParams {
	o.SetMaxCapacity(maxCapacity)
	return o
}

// SetMaxCapacity adds the maxCapacity to the search queue skill params
func (o *SearchQueueSkillParams) SetMaxCapacity(maxCapacity []int32) {
	o.MaxCapacity = maxCapacity
}

// WithMinCapacity adds the minCapacity to the search queue skill params
func (o *SearchQueueSkillParams) WithMinCapacity(minCapacity []int32) *SearchQueueSkillParams {
	o.SetMinCapacity(minCapacity)
	return o
}

// SetMinCapacity adds the minCapacity to the search queue skill params
func (o *SearchQueueSkillParams) SetMinCapacity(minCapacity []int32) {
	o.MinCapacity = minCapacity
}

// WithPage adds the page to the search queue skill params
func (o *SearchQueueSkillParams) WithPage(page *int32) *SearchQueueSkillParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search queue skill params
func (o *SearchQueueSkillParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the search queue skill params
func (o *SearchQueueSkillParams) WithQ(q *string) *SearchQueueSkillParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the search queue skill params
func (o *SearchQueueSkillParams) SetQ(q *string) {
	o.Q = q
}

// WithQueueID adds the queueID to the search queue skill params
func (o *SearchQueueSkillParams) WithQueueID(queueID int64) *SearchQueueSkillParams {
	o.SetQueueID(queueID)
	return o
}

// SetQueueID adds the queueId to the search queue skill params
func (o *SearchQueueSkillParams) SetQueueID(queueID int64) {
	o.QueueID = queueID
}

// WithSize adds the size to the search queue skill params
func (o *SearchQueueSkillParams) WithSize(size *int32) *SearchQueueSkillParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search queue skill params
func (o *SearchQueueSkillParams) SetSize(size *int32) {
	o.Size = size
}

// WithSkillID adds the skillID to the search queue skill params
func (o *SearchQueueSkillParams) WithSkillID(skillID []int64) *SearchQueueSkillParams {
	o.SetSkillID(skillID)
	return o
}

// SetSkillID adds the skillId to the search queue skill params
func (o *SearchQueueSkillParams) SetSkillID(skillID []int64) {
	o.SkillID = skillID
}

// WithSort adds the sort to the search queue skill params
func (o *SearchQueueSkillParams) WithSort(sort *string) *SearchQueueSkillParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search queue skill params
func (o *SearchQueueSkillParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *SearchQueueSkillParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BucketID != nil {

		// binding items for bucket_id
		joinedBucketID := o.bindParamBucketID(reg)

		// query array param bucket_id
		if err := r.SetQueryParam("bucket_id", joinedBucketID...); err != nil {
			return err
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Lvl != nil {

		// binding items for lvl
		joinedLvl := o.bindParamLvl(reg)

		// query array param lvl
		if err := r.SetQueryParam("lvl", joinedLvl...); err != nil {
			return err
		}
	}

	if o.MaxCapacity != nil {

		// binding items for max_capacity
		joinedMaxCapacity := o.bindParamMaxCapacity(reg)

		// query array param max_capacity
		if err := r.SetQueryParam("max_capacity", joinedMaxCapacity...); err != nil {
			return err
		}
	}

	if o.MinCapacity != nil {

		// binding items for min_capacity
		joinedMinCapacity := o.bindParamMinCapacity(reg)

		// query array param min_capacity
		if err := r.SetQueryParam("min_capacity", joinedMinCapacity...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	// path param queue_id
	if err := r.SetPathParam("queue_id", swag.FormatInt64(o.QueueID)); err != nil {
		return err
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.SkillID != nil {

		// binding items for skill_id
		joinedSkillID := o.bindParamSkillID(reg)

		// query array param skill_id
		if err := r.SetQueryParam("skill_id", joinedSkillID...); err != nil {
			return err
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchQueueSkill binds the parameter bucket_id
func (o *SearchQueueSkillParams) bindParamBucketID(formats strfmt.Registry) []string {
	bucketIDIR := o.BucketID

	var bucketIDIC []string
	for _, bucketIDIIR := range bucketIDIR { // explode []int64

		bucketIDIIV := swag.FormatInt64(bucketIDIIR) // int64 as string
		bucketIDIC = append(bucketIDIC, bucketIDIIV)
	}

	// items.CollectionFormat: "multi"
	bucketIDIS := swag.JoinByFormat(bucketIDIC, "multi")

	return bucketIDIS
}

// bindParamSearchQueueSkill binds the parameter fields
func (o *SearchQueueSkillParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamSearchQueueSkill binds the parameter id
func (o *SearchQueueSkillParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []int64

		iDIIV := swag.FormatInt64(iDIIR) // int64 as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamSearchQueueSkill binds the parameter lvl
func (o *SearchQueueSkillParams) bindParamLvl(formats strfmt.Registry) []string {
	lvlIR := o.Lvl

	var lvlIC []string
	for _, lvlIIR := range lvlIR { // explode []int32

		lvlIIV := swag.FormatInt32(lvlIIR) // int32 as string
		lvlIC = append(lvlIC, lvlIIV)
	}

	// items.CollectionFormat: "multi"
	lvlIS := swag.JoinByFormat(lvlIC, "multi")

	return lvlIS
}

// bindParamSearchQueueSkill binds the parameter max_capacity
func (o *SearchQueueSkillParams) bindParamMaxCapacity(formats strfmt.Registry) []string {
	maxCapacityIR := o.MaxCapacity

	var maxCapacityIC []string
	for _, maxCapacityIIR := range maxCapacityIR { // explode []int32

		maxCapacityIIV := swag.FormatInt32(maxCapacityIIR) // int32 as string
		maxCapacityIC = append(maxCapacityIC, maxCapacityIIV)
	}

	// items.CollectionFormat: "multi"
	maxCapacityIS := swag.JoinByFormat(maxCapacityIC, "multi")

	return maxCapacityIS
}

// bindParamSearchQueueSkill binds the parameter min_capacity
func (o *SearchQueueSkillParams) bindParamMinCapacity(formats strfmt.Registry) []string {
	minCapacityIR := o.MinCapacity

	var minCapacityIC []string
	for _, minCapacityIIR := range minCapacityIR { // explode []int32

		minCapacityIIV := swag.FormatInt32(minCapacityIIR) // int32 as string
		minCapacityIC = append(minCapacityIC, minCapacityIIV)
	}

	// items.CollectionFormat: "multi"
	minCapacityIS := swag.JoinByFormat(minCapacityIC, "multi")

	return minCapacityIS
}

// bindParamSearchQueueSkill binds the parameter skill_id
func (o *SearchQueueSkillParams) bindParamSkillID(formats strfmt.Registry) []string {
	skillIDIR := o.SkillID

	var skillIDIC []string
	for _, skillIDIIR := range skillIDIR { // explode []int64

		skillIDIIV := swag.FormatInt64(skillIDIIR) // int64 as string
		skillIDIC = append(skillIDIC, skillIDIIV)
	}

	// items.CollectionFormat: "multi"
	skillIDIS := swag.JoinByFormat(skillIDIC, "multi")

	return skillIDIS
}
