// Code generated by go-swagger; DO NOT EDIT.

package queue_skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queue skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueueSkill(params *CreateQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueSkillOK, error)

	DeleteQueueSkill(params *DeleteQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueSkillOK, error)

	PatchQueueSkill(params *PatchQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueSkillOK, error)

	ReadQueueSkill(params *ReadQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueSkillOK, error)

	SearchQueueSkill(params *SearchQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueSkillOK, error)

	UpdateQueueSkill(params *UpdateQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateQueueSkill create queue skill API
*/
func (a *Client) CreateQueueSkill(params *CreateQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueueSkill",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQueueSkill delete queue skill API
*/
func (a *Client) DeleteQueueSkill(params *DeleteQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueueSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchQueueSkill patch queue skill API
*/
func (a *Client) PatchQueueSkill(params *PatchQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueueSkill",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadQueueSkill read queue skill API
*/
func (a *Client) ReadQueueSkill(params *ReadQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueueSkill",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchQueueSkill search queue skill API
*/
func (a *Client) SearchQueueSkill(params *SearchQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueSkill",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateQueueSkill update queue skill API
*/
func (a *Client) UpdateQueueSkill(params *UpdateQueueSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueueSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQueueSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateQueueSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
