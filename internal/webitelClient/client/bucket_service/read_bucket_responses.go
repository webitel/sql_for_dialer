// Code generated by go-swagger; DO NOT EDIT.

package bucket_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// ReadBucketReader is a Reader for the ReadBucket structure.
type ReadBucketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadBucketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadBucketOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewReadBucketForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadBucketNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReadBucketOK creates a ReadBucketOK with default headers values
func NewReadBucketOK() *ReadBucketOK {
	return &ReadBucketOK{}
}

/* ReadBucketOK describes a response with status code 200, with default header values.

A successful response.
*/
type ReadBucketOK struct {
	Payload *models.EngineBucket
}

func (o *ReadBucketOK) Error() string {
	return fmt.Sprintf("[GET /call_center/buckets/{id}][%d] readBucketOK  %+v", 200, o.Payload)
}
func (o *ReadBucketOK) GetPayload() *models.EngineBucket {
	return o.Payload
}

func (o *ReadBucketOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineBucket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadBucketForbidden creates a ReadBucketForbidden with default headers values
func NewReadBucketForbidden() *ReadBucketForbidden {
	return &ReadBucketForbidden{}
}

/* ReadBucketForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type ReadBucketForbidden struct {
	Payload interface{}
}

func (o *ReadBucketForbidden) Error() string {
	return fmt.Sprintf("[GET /call_center/buckets/{id}][%d] readBucketForbidden  %+v", 403, o.Payload)
}
func (o *ReadBucketForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ReadBucketForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadBucketNotFound creates a ReadBucketNotFound with default headers values
func NewReadBucketNotFound() *ReadBucketNotFound {
	return &ReadBucketNotFound{}
}

/* ReadBucketNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type ReadBucketNotFound struct {
	Payload string
}

func (o *ReadBucketNotFound) Error() string {
	return fmt.Sprintf("[GET /call_center/buckets/{id}][%d] readBucketNotFound  %+v", 404, o.Payload)
}
func (o *ReadBucketNotFound) GetPayload() string {
	return o.Payload
}

func (o *ReadBucketNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
