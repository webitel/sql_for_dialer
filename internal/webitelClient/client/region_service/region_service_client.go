// Code generated by go-swagger; DO NOT EDIT.

package region_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new region service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for region service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRegion(params *CreateRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRegionOK, error)

	DeleteRegion(params *DeleteRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRegionOK, error)

	PatchRegion(params *PatchRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchRegionOK, error)

	ReadRegion(params *ReadRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadRegionOK, error)

	SearchRegion(params *SearchRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegionOK, error)

	UpdateRegion(params *UpdateRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRegionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRegion create region API
*/
func (a *Client) CreateRegion(params *CreateRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRegion",
		Method:             "POST",
		PathPattern:        "/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRegion delete region API
*/
func (a *Client) DeleteRegion(params *DeleteRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRegion",
		Method:             "DELETE",
		PathPattern:        "/regions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRegion patch region API
*/
func (a *Client) PatchRegion(params *PatchRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchRegion",
		Method:             "PATCH",
		PathPattern:        "/regions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRegion read region API
*/
func (a *Client) ReadRegion(params *ReadRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadRegion",
		Method:             "GET",
		PathPattern:        "/regions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchRegion search region API
*/
func (a *Client) SearchRegion(params *SearchRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchRegion",
		Method:             "GET",
		PathPattern:        "/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRegion update region API
*/
func (a *Client) UpdateRegion(params *UpdateRegionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRegion",
		Method:             "PUT",
		PathPattern:        "/regions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
