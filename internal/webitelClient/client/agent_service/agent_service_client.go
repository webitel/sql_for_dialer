// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AgentSetState(params *AgentSetStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AgentSetStateOK, error)

	AgentStateHistory(params *AgentStateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AgentStateHistoryOK, error)

	CreateAgent(params *CreateAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentOK, error)

	DeleteAgent(params *DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentOK, error)

	PatchAgent(params *PatchAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentOK, error)

	ReadAgent(params *ReadAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentOK, error)

	SearchAgent(params *SearchAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentOK, error)

	SearchAgentCallStatistics(params *SearchAgentCallStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentCallStatisticsOK, error)

	SearchAgentInQueue(params *SearchAgentInQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInQueueOK, error)

	SearchAgentInQueueStatistics(params *SearchAgentInQueueStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInQueueStatisticsOK, error)

	SearchAgentInTeam(params *SearchAgentInTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInTeamOK, error)

	SearchAgentStateHistory(params *SearchAgentStateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStateHistoryOK, error)

	SearchAgentStatusStatistic(params *SearchAgentStatusStatisticParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStatusStatisticOK, error)

	SearchAgentStatusStatisticItem(params *SearchAgentStatusStatisticItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStatusStatisticItemOK, error)

	SearchLookupUsersAgentNotExists(params *SearchLookupUsersAgentNotExistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchLookupUsersAgentNotExistsOK, error)

	SearchPauseCauseForAgent(params *SearchPauseCauseForAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPauseCauseForAgentOK, error)

	UpdateAgent(params *UpdateAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentOK, error)

	UpdateAgentStatus(params *UpdateAgentStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AgentSetState agent set state API
*/
func (a *Client) AgentSetState(params *AgentSetStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AgentSetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentSetStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentSetState",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{agent_id}/states/waiting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentSetStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentSetStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AgentSetState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AgentStateHistory agent state history API
*/
func (a *Client) AgentStateHistory(params *AgentStateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AgentStateHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentStateHistory",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/states/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentStateHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AgentStateHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAgent creates agent
*/
func (a *Client) CreateAgent(params *CreateAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgent",
		Method:             "POST",
		PathPattern:        "/call_center/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgent removes agent
*/
func (a *Client) DeleteAgent(params *DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgent",
		Method:             "DELETE",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAgent updates agent
*/
func (a *Client) PatchAgent(params *PatchAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgent",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAgent agents item
*/
func (a *Client) ReadAgent(params *ReadAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgent lists of agent
*/
func (a *Client) SearchAgent(params *SearchAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentCallStatistics search agent call statistics API
*/
func (a *Client) SearchAgentCallStatistics(params *SearchAgentCallStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentCallStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentCallStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentCallStatistics",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentCallStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentCallStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentCallStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentInQueue search agent in queue API
*/
func (a *Client) SearchAgentInQueue(params *SearchAgentInQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentInQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInQueue",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentInQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentInQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentInQueueStatistics search agent in queue statistics API
*/
func (a *Client) SearchAgentInQueueStatistics(params *SearchAgentInQueueStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInQueueStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentInQueueStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInQueueStatistics",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/statistics/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentInQueueStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInQueueStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentInQueueStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentInTeam todos deprecated
*/
func (a *Client) SearchAgentInTeam(params *SearchAgentInTeamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentInTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentInTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInTeam",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentInTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentInTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentStateHistory search agent state history API
*/
func (a *Client) SearchAgentStateHistory(params *SearchAgentStateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStateHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStateHistory",
		Method:             "GET",
		PathPattern:        "/call_center/agents/states/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentStateHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentStateHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentStatusStatistic search agent status statistic API
*/
func (a *Client) SearchAgentStatusStatistic(params *SearchAgentStatusStatisticParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStatusStatisticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentStatusStatisticParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStatusStatistic",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentStatusStatisticReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStatusStatisticOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentStatusStatistic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentStatusStatisticItem search agent status statistic item API
*/
func (a *Client) SearchAgentStatusStatisticItem(params *SearchAgentStatusStatisticItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentStatusStatisticItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentStatusStatisticItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStatusStatisticItem",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/status/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentStatusStatisticItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStatusStatisticItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentStatusStatisticItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchLookupUsersAgentNotExists searches lookup agent not exists user
*/
func (a *Client) SearchLookupUsersAgentNotExists(params *SearchLookupUsersAgentNotExistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchLookupUsersAgentNotExistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLookupUsersAgentNotExistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchLookupUsersAgentNotExists",
		Method:             "GET",
		PathPattern:        "/call_center/lookups/agents/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchLookupUsersAgentNotExistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLookupUsersAgentNotExistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchLookupUsersAgentNotExists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchPauseCauseForAgent search pause cause for agent API
*/
func (a *Client) SearchPauseCauseForAgent(params *SearchPauseCauseForAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPauseCauseForAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPauseCauseForAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchPauseCauseForAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchPauseCauseForAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPauseCauseForAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchPauseCauseForAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAgent updates agent
*/
func (a *Client) UpdateAgent(params *UpdateAgentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgent",
		Method:             "PUT",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAgentStatus changes agent status
*/
func (a *Client) UpdateAgentStatus(params *UpdateAgentStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgentStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentStatus",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAgentStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAgentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
