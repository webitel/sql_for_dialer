// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchAgentStatusStatisticParams creates a new SearchAgentStatusStatisticParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchAgentStatusStatisticParams() *SearchAgentStatusStatisticParams {
	return &SearchAgentStatusStatisticParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchAgentStatusStatisticParamsWithTimeout creates a new SearchAgentStatusStatisticParams object
// with the ability to set a timeout on a request.
func NewSearchAgentStatusStatisticParamsWithTimeout(timeout time.Duration) *SearchAgentStatusStatisticParams {
	return &SearchAgentStatusStatisticParams{
		timeout: timeout,
	}
}

// NewSearchAgentStatusStatisticParamsWithContext creates a new SearchAgentStatusStatisticParams object
// with the ability to set a context for a request.
func NewSearchAgentStatusStatisticParamsWithContext(ctx context.Context) *SearchAgentStatusStatisticParams {
	return &SearchAgentStatusStatisticParams{
		Context: ctx,
	}
}

// NewSearchAgentStatusStatisticParamsWithHTTPClient creates a new SearchAgentStatusStatisticParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchAgentStatusStatisticParamsWithHTTPClient(client *http.Client) *SearchAgentStatusStatisticParams {
	return &SearchAgentStatusStatisticParams{
		HTTPClient: client,
	}
}

/* SearchAgentStatusStatisticParams contains all the parameters to send to the API endpoint
   for the search agent status statistic operation.

   Typically these are written to a http.Request.
*/
type SearchAgentStatusStatisticParams struct {

	// AgentID.
	AgentID []string

	// AuditorID.
	AuditorID []string

	// Fields.
	Fields []string

	// HasCall.
	//
	// Format: boolean
	HasCall *bool

	// Page.
	//
	// Format: int32
	Page *int32

	// Q.
	Q *string

	// QueueID.
	QueueID []int32

	// RegionID.
	RegionID []int64

	// Size.
	//
	// Format: int32
	Size *int32

	// SkillID.
	SkillID []int64

	// Sort.
	Sort *string

	// Status.
	Status []string

	// SupervisorID.
	SupervisorID []int64

	// TeamID.
	TeamID []int32

	// TimeFrom.
	//
	// Format: int64
	TimeFrom *string

	// TimeTo.
	//
	// Format: int64
	TimeTo *string

	// UtilizationFrom.
	//
	// Format: int64
	UtilizationFrom *string

	// UtilizationTo.
	//
	// Format: int64
	UtilizationTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search agent status statistic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentStatusStatisticParams) WithDefaults() *SearchAgentStatusStatisticParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search agent status statistic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentStatusStatisticParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithTimeout(timeout time.Duration) *SearchAgentStatusStatisticParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithContext(ctx context.Context) *SearchAgentStatusStatisticParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithHTTPClient(client *http.Client) *SearchAgentStatusStatisticParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentID adds the agentID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithAgentID(agentID []string) *SearchAgentStatusStatisticParams {
	o.SetAgentID(agentID)
	return o
}

// SetAgentID adds the agentId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetAgentID(agentID []string) {
	o.AgentID = agentID
}

// WithAuditorID adds the auditorID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithAuditorID(auditorID []string) *SearchAgentStatusStatisticParams {
	o.SetAuditorID(auditorID)
	return o
}

// SetAuditorID adds the auditorId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetAuditorID(auditorID []string) {
	o.AuditorID = auditorID
}

// WithFields adds the fields to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithFields(fields []string) *SearchAgentStatusStatisticParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHasCall adds the hasCall to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithHasCall(hasCall *bool) *SearchAgentStatusStatisticParams {
	o.SetHasCall(hasCall)
	return o
}

// SetHasCall adds the hasCall to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetHasCall(hasCall *bool) {
	o.HasCall = hasCall
}

// WithPage adds the page to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithPage(page *int32) *SearchAgentStatusStatisticParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithQ(q *string) *SearchAgentStatusStatisticParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetQ(q *string) {
	o.Q = q
}

// WithQueueID adds the queueID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithQueueID(queueID []int32) *SearchAgentStatusStatisticParams {
	o.SetQueueID(queueID)
	return o
}

// SetQueueID adds the queueId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetQueueID(queueID []int32) {
	o.QueueID = queueID
}

// WithRegionID adds the regionID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithRegionID(regionID []int64) *SearchAgentStatusStatisticParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetRegionID(regionID []int64) {
	o.RegionID = regionID
}

// WithSize adds the size to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithSize(size *int32) *SearchAgentStatusStatisticParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetSize(size *int32) {
	o.Size = size
}

// WithSkillID adds the skillID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithSkillID(skillID []int64) *SearchAgentStatusStatisticParams {
	o.SetSkillID(skillID)
	return o
}

// SetSkillID adds the skillId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetSkillID(skillID []int64) {
	o.SkillID = skillID
}

// WithSort adds the sort to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithSort(sort *string) *SearchAgentStatusStatisticParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStatus adds the status to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithStatus(status []string) *SearchAgentStatusStatisticParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetStatus(status []string) {
	o.Status = status
}

// WithSupervisorID adds the supervisorID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithSupervisorID(supervisorID []int64) *SearchAgentStatusStatisticParams {
	o.SetSupervisorID(supervisorID)
	return o
}

// SetSupervisorID adds the supervisorId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetSupervisorID(supervisorID []int64) {
	o.SupervisorID = supervisorID
}

// WithTeamID adds the teamID to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithTeamID(teamID []int32) *SearchAgentStatusStatisticParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetTeamID(teamID []int32) {
	o.TeamID = teamID
}

// WithTimeFrom adds the timeFrom to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithTimeFrom(timeFrom *string) *SearchAgentStatusStatisticParams {
	o.SetTimeFrom(timeFrom)
	return o
}

// SetTimeFrom adds the timeFrom to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetTimeFrom(timeFrom *string) {
	o.TimeFrom = timeFrom
}

// WithTimeTo adds the timeTo to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithTimeTo(timeTo *string) *SearchAgentStatusStatisticParams {
	o.SetTimeTo(timeTo)
	return o
}

// SetTimeTo adds the timeTo to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetTimeTo(timeTo *string) {
	o.TimeTo = timeTo
}

// WithUtilizationFrom adds the utilizationFrom to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithUtilizationFrom(utilizationFrom *string) *SearchAgentStatusStatisticParams {
	o.SetUtilizationFrom(utilizationFrom)
	return o
}

// SetUtilizationFrom adds the utilizationFrom to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetUtilizationFrom(utilizationFrom *string) {
	o.UtilizationFrom = utilizationFrom
}

// WithUtilizationTo adds the utilizationTo to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) WithUtilizationTo(utilizationTo *string) *SearchAgentStatusStatisticParams {
	o.SetUtilizationTo(utilizationTo)
	return o
}

// SetUtilizationTo adds the utilizationTo to the search agent status statistic params
func (o *SearchAgentStatusStatisticParams) SetUtilizationTo(utilizationTo *string) {
	o.UtilizationTo = utilizationTo
}

// WriteToRequest writes these params to a swagger request
func (o *SearchAgentStatusStatisticParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AgentID != nil {

		// binding items for agent_id
		joinedAgentID := o.bindParamAgentID(reg)

		// query array param agent_id
		if err := r.SetQueryParam("agent_id", joinedAgentID...); err != nil {
			return err
		}
	}

	if o.AuditorID != nil {

		// binding items for auditor_id
		joinedAuditorID := o.bindParamAuditorID(reg)

		// query array param auditor_id
		if err := r.SetQueryParam("auditor_id", joinedAuditorID...); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HasCall != nil {

		// query param has_call
		var qrHasCall bool

		if o.HasCall != nil {
			qrHasCall = *o.HasCall
		}
		qHasCall := swag.FormatBool(qrHasCall)
		if qHasCall != "" {

			if err := r.SetQueryParam("has_call", qHasCall); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.QueueID != nil {

		// binding items for queue_id
		joinedQueueID := o.bindParamQueueID(reg)

		// query array param queue_id
		if err := r.SetQueryParam("queue_id", joinedQueueID...); err != nil {
			return err
		}
	}

	if o.RegionID != nil {

		// binding items for region_id
		joinedRegionID := o.bindParamRegionID(reg)

		// query array param region_id
		if err := r.SetQueryParam("region_id", joinedRegionID...); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.SkillID != nil {

		// binding items for skill_id
		joinedSkillID := o.bindParamSkillID(reg)

		// query array param skill_id
		if err := r.SetQueryParam("skill_id", joinedSkillID...); err != nil {
			return err
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if o.SupervisorID != nil {

		// binding items for supervisor_id
		joinedSupervisorID := o.bindParamSupervisorID(reg)

		// query array param supervisor_id
		if err := r.SetQueryParam("supervisor_id", joinedSupervisorID...); err != nil {
			return err
		}
	}

	if o.TeamID != nil {

		// binding items for team_id
		joinedTeamID := o.bindParamTeamID(reg)

		// query array param team_id
		if err := r.SetQueryParam("team_id", joinedTeamID...); err != nil {
			return err
		}
	}

	if o.TimeFrom != nil {

		// query param time.from
		var qrTimeFrom string

		if o.TimeFrom != nil {
			qrTimeFrom = *o.TimeFrom
		}
		qTimeFrom := qrTimeFrom
		if qTimeFrom != "" {

			if err := r.SetQueryParam("time.from", qTimeFrom); err != nil {
				return err
			}
		}
	}

	if o.TimeTo != nil {

		// query param time.to
		var qrTimeTo string

		if o.TimeTo != nil {
			qrTimeTo = *o.TimeTo
		}
		qTimeTo := qrTimeTo
		if qTimeTo != "" {

			if err := r.SetQueryParam("time.to", qTimeTo); err != nil {
				return err
			}
		}
	}

	if o.UtilizationFrom != nil {

		// query param utilization.from
		var qrUtilizationFrom string

		if o.UtilizationFrom != nil {
			qrUtilizationFrom = *o.UtilizationFrom
		}
		qUtilizationFrom := qrUtilizationFrom
		if qUtilizationFrom != "" {

			if err := r.SetQueryParam("utilization.from", qUtilizationFrom); err != nil {
				return err
			}
		}
	}

	if o.UtilizationTo != nil {

		// query param utilization.to
		var qrUtilizationTo string

		if o.UtilizationTo != nil {
			qrUtilizationTo = *o.UtilizationTo
		}
		qUtilizationTo := qrUtilizationTo
		if qUtilizationTo != "" {

			if err := r.SetQueryParam("utilization.to", qUtilizationTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchAgentStatusStatistic binds the parameter agent_id
func (o *SearchAgentStatusStatisticParams) bindParamAgentID(formats strfmt.Registry) []string {
	agentIDIR := o.AgentID

	var agentIDIC []string
	for _, agentIDIIR := range agentIDIR { // explode []string

		agentIDIIV := agentIDIIR // string as string
		agentIDIC = append(agentIDIC, agentIDIIV)
	}

	// items.CollectionFormat: "multi"
	agentIDIS := swag.JoinByFormat(agentIDIC, "multi")

	return agentIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter auditor_id
func (o *SearchAgentStatusStatisticParams) bindParamAuditorID(formats strfmt.Registry) []string {
	auditorIDIR := o.AuditorID

	var auditorIDIC []string
	for _, auditorIDIIR := range auditorIDIR { // explode []string

		auditorIDIIV := auditorIDIIR // string as string
		auditorIDIC = append(auditorIDIC, auditorIDIIV)
	}

	// items.CollectionFormat: "multi"
	auditorIDIS := swag.JoinByFormat(auditorIDIC, "multi")

	return auditorIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter fields
func (o *SearchAgentStatusStatisticParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamSearchAgentStatusStatistic binds the parameter queue_id
func (o *SearchAgentStatusStatisticParams) bindParamQueueID(formats strfmt.Registry) []string {
	queueIDIR := o.QueueID

	var queueIDIC []string
	for _, queueIDIIR := range queueIDIR { // explode []int32

		queueIDIIV := swag.FormatInt32(queueIDIIR) // int32 as string
		queueIDIC = append(queueIDIC, queueIDIIV)
	}

	// items.CollectionFormat: "multi"
	queueIDIS := swag.JoinByFormat(queueIDIC, "multi")

	return queueIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter region_id
func (o *SearchAgentStatusStatisticParams) bindParamRegionID(formats strfmt.Registry) []string {
	regionIDIR := o.RegionID

	var regionIDIC []string
	for _, regionIDIIR := range regionIDIR { // explode []int64

		regionIDIIV := swag.FormatInt64(regionIDIIR) // int64 as string
		regionIDIC = append(regionIDIC, regionIDIIV)
	}

	// items.CollectionFormat: "multi"
	regionIDIS := swag.JoinByFormat(regionIDIC, "multi")

	return regionIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter skill_id
func (o *SearchAgentStatusStatisticParams) bindParamSkillID(formats strfmt.Registry) []string {
	skillIDIR := o.SkillID

	var skillIDIC []string
	for _, skillIDIIR := range skillIDIR { // explode []int64

		skillIDIIV := swag.FormatInt64(skillIDIIR) // int64 as string
		skillIDIC = append(skillIDIC, skillIDIIV)
	}

	// items.CollectionFormat: "multi"
	skillIDIS := swag.JoinByFormat(skillIDIC, "multi")

	return skillIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter status
func (o *SearchAgentStatusStatisticParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: "multi"
	statusIS := swag.JoinByFormat(statusIC, "multi")

	return statusIS
}

// bindParamSearchAgentStatusStatistic binds the parameter supervisor_id
func (o *SearchAgentStatusStatisticParams) bindParamSupervisorID(formats strfmt.Registry) []string {
	supervisorIDIR := o.SupervisorID

	var supervisorIDIC []string
	for _, supervisorIDIIR := range supervisorIDIR { // explode []int64

		supervisorIDIIV := swag.FormatInt64(supervisorIDIIR) // int64 as string
		supervisorIDIC = append(supervisorIDIC, supervisorIDIIV)
	}

	// items.CollectionFormat: "multi"
	supervisorIDIS := swag.JoinByFormat(supervisorIDIC, "multi")

	return supervisorIDIS
}

// bindParamSearchAgentStatusStatistic binds the parameter team_id
func (o *SearchAgentStatusStatisticParams) bindParamTeamID(formats strfmt.Registry) []string {
	teamIDIR := o.TeamID

	var teamIDIC []string
	for _, teamIDIIR := range teamIDIR { // explode []int32

		teamIDIIV := swag.FormatInt32(teamIDIIR) // int32 as string
		teamIDIC = append(teamIDIC, teamIDIIV)
	}

	// items.CollectionFormat: "multi"
	teamIDIS := swag.JoinByFormat(teamIDIC, "multi")

	return teamIDIS
}
