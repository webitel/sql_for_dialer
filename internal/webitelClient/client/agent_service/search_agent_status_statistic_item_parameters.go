// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchAgentStatusStatisticItemParams creates a new SearchAgentStatusStatisticItemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchAgentStatusStatisticItemParams() *SearchAgentStatusStatisticItemParams {
	return &SearchAgentStatusStatisticItemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchAgentStatusStatisticItemParamsWithTimeout creates a new SearchAgentStatusStatisticItemParams object
// with the ability to set a timeout on a request.
func NewSearchAgentStatusStatisticItemParamsWithTimeout(timeout time.Duration) *SearchAgentStatusStatisticItemParams {
	return &SearchAgentStatusStatisticItemParams{
		timeout: timeout,
	}
}

// NewSearchAgentStatusStatisticItemParamsWithContext creates a new SearchAgentStatusStatisticItemParams object
// with the ability to set a context for a request.
func NewSearchAgentStatusStatisticItemParamsWithContext(ctx context.Context) *SearchAgentStatusStatisticItemParams {
	return &SearchAgentStatusStatisticItemParams{
		Context: ctx,
	}
}

// NewSearchAgentStatusStatisticItemParamsWithHTTPClient creates a new SearchAgentStatusStatisticItemParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchAgentStatusStatisticItemParamsWithHTTPClient(client *http.Client) *SearchAgentStatusStatisticItemParams {
	return &SearchAgentStatusStatisticItemParams{
		HTTPClient: client,
	}
}

/* SearchAgentStatusStatisticItemParams contains all the parameters to send to the API endpoint
   for the search agent status statistic item operation.

   Typically these are written to a http.Request.
*/
type SearchAgentStatusStatisticItemParams struct {

	// AgentID.
	//
	// Format: int64
	AgentID string

	// TimeFrom.
	//
	// Format: int64
	TimeFrom *string

	// TimeTo.
	//
	// Format: int64
	TimeTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search agent status statistic item params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentStatusStatisticItemParams) WithDefaults() *SearchAgentStatusStatisticItemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search agent status statistic item params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentStatusStatisticItemParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithTimeout(timeout time.Duration) *SearchAgentStatusStatisticItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithContext(ctx context.Context) *SearchAgentStatusStatisticItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithHTTPClient(client *http.Client) *SearchAgentStatusStatisticItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentID adds the agentID to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithAgentID(agentID string) *SearchAgentStatusStatisticItemParams {
	o.SetAgentID(agentID)
	return o
}

// SetAgentID adds the agentId to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetAgentID(agentID string) {
	o.AgentID = agentID
}

// WithTimeFrom adds the timeFrom to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithTimeFrom(timeFrom *string) *SearchAgentStatusStatisticItemParams {
	o.SetTimeFrom(timeFrom)
	return o
}

// SetTimeFrom adds the timeFrom to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetTimeFrom(timeFrom *string) {
	o.TimeFrom = timeFrom
}

// WithTimeTo adds the timeTo to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) WithTimeTo(timeTo *string) *SearchAgentStatusStatisticItemParams {
	o.SetTimeTo(timeTo)
	return o
}

// SetTimeTo adds the timeTo to the search agent status statistic item params
func (o *SearchAgentStatusStatisticItemParams) SetTimeTo(timeTo *string) {
	o.TimeTo = timeTo
}

// WriteToRequest writes these params to a swagger request
func (o *SearchAgentStatusStatisticItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param agent_id
	if err := r.SetPathParam("agent_id", o.AgentID); err != nil {
		return err
	}

	if o.TimeFrom != nil {

		// query param time.from
		var qrTimeFrom string

		if o.TimeFrom != nil {
			qrTimeFrom = *o.TimeFrom
		}
		qTimeFrom := qrTimeFrom
		if qTimeFrom != "" {

			if err := r.SetQueryParam("time.from", qTimeFrom); err != nil {
				return err
			}
		}
	}

	if o.TimeTo != nil {

		// query param time.to
		var qrTimeTo string

		if o.TimeTo != nil {
			qrTimeTo = *o.TimeTo
		}
		qTimeTo := qrTimeTo
		if qTimeTo != "" {

			if err := r.SetQueryParam("time.to", qTimeTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
