// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// AgentSetStateReader is a Reader for the AgentSetState structure.
type AgentSetStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AgentSetStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAgentSetStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAgentSetStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAgentSetStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAgentSetStateOK creates a AgentSetStateOK with default headers values
func NewAgentSetStateOK() *AgentSetStateOK {
	return &AgentSetStateOK{}
}

/* AgentSetStateOK describes a response with status code 200, with default header values.

A successful response.
*/
type AgentSetStateOK struct {
	Payload models.EngineAgentSetStateResponse
}

func (o *AgentSetStateOK) Error() string {
	return fmt.Sprintf("[PATCH /call_center/agents/{agent_id}/states/waiting][%d] agentSetStateOK  %+v", 200, o.Payload)
}
func (o *AgentSetStateOK) GetPayload() models.EngineAgentSetStateResponse {
	return o.Payload
}

func (o *AgentSetStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAgentSetStateForbidden creates a AgentSetStateForbidden with default headers values
func NewAgentSetStateForbidden() *AgentSetStateForbidden {
	return &AgentSetStateForbidden{}
}

/* AgentSetStateForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type AgentSetStateForbidden struct {
	Payload interface{}
}

func (o *AgentSetStateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /call_center/agents/{agent_id}/states/waiting][%d] agentSetStateForbidden  %+v", 403, o.Payload)
}
func (o *AgentSetStateForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AgentSetStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAgentSetStateNotFound creates a AgentSetStateNotFound with default headers values
func NewAgentSetStateNotFound() *AgentSetStateNotFound {
	return &AgentSetStateNotFound{}
}

/* AgentSetStateNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type AgentSetStateNotFound struct {
	Payload string
}

func (o *AgentSetStateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /call_center/agents/{agent_id}/states/waiting][%d] agentSetStateNotFound  %+v", 404, o.Payload)
}
func (o *AgentSetStateNotFound) GetPayload() string {
	return o.Payload
}

func (o *AgentSetStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
