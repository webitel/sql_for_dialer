// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchAgentInTeamParams creates a new SearchAgentInTeamParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchAgentInTeamParams() *SearchAgentInTeamParams {
	return &SearchAgentInTeamParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchAgentInTeamParamsWithTimeout creates a new SearchAgentInTeamParams object
// with the ability to set a timeout on a request.
func NewSearchAgentInTeamParamsWithTimeout(timeout time.Duration) *SearchAgentInTeamParams {
	return &SearchAgentInTeamParams{
		timeout: timeout,
	}
}

// NewSearchAgentInTeamParamsWithContext creates a new SearchAgentInTeamParams object
// with the ability to set a context for a request.
func NewSearchAgentInTeamParamsWithContext(ctx context.Context) *SearchAgentInTeamParams {
	return &SearchAgentInTeamParams{
		Context: ctx,
	}
}

// NewSearchAgentInTeamParamsWithHTTPClient creates a new SearchAgentInTeamParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchAgentInTeamParamsWithHTTPClient(client *http.Client) *SearchAgentInTeamParams {
	return &SearchAgentInTeamParams{
		HTTPClient: client,
	}
}

/* SearchAgentInTeamParams contains all the parameters to send to the API endpoint
   for the search agent in team operation.

   Typically these are written to a http.Request.
*/
type SearchAgentInTeamParams struct {

	// DomainID.
	//
	// Format: int64
	DomainID *string

	// ID.
	//
	// Format: int64
	ID string

	// Page.
	//
	// Format: int32
	Page *int32

	// Q.
	Q *string

	// Size.
	//
	// Format: int32
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search agent in team params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentInTeamParams) WithDefaults() *SearchAgentInTeamParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search agent in team params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchAgentInTeamParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search agent in team params
func (o *SearchAgentInTeamParams) WithTimeout(timeout time.Duration) *SearchAgentInTeamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search agent in team params
func (o *SearchAgentInTeamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search agent in team params
func (o *SearchAgentInTeamParams) WithContext(ctx context.Context) *SearchAgentInTeamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search agent in team params
func (o *SearchAgentInTeamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search agent in team params
func (o *SearchAgentInTeamParams) WithHTTPClient(client *http.Client) *SearchAgentInTeamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search agent in team params
func (o *SearchAgentInTeamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the search agent in team params
func (o *SearchAgentInTeamParams) WithDomainID(domainID *string) *SearchAgentInTeamParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the search agent in team params
func (o *SearchAgentInTeamParams) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WithID adds the id to the search agent in team params
func (o *SearchAgentInTeamParams) WithID(id string) *SearchAgentInTeamParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search agent in team params
func (o *SearchAgentInTeamParams) SetID(id string) {
	o.ID = id
}

// WithPage adds the page to the search agent in team params
func (o *SearchAgentInTeamParams) WithPage(page *int32) *SearchAgentInTeamParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search agent in team params
func (o *SearchAgentInTeamParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the search agent in team params
func (o *SearchAgentInTeamParams) WithQ(q *string) *SearchAgentInTeamParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the search agent in team params
func (o *SearchAgentInTeamParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the search agent in team params
func (o *SearchAgentInTeamParams) WithSize(size *int32) *SearchAgentInTeamParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search agent in team params
func (o *SearchAgentInTeamParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *SearchAgentInTeamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainID != nil {

		// query param domain_id
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domain_id", qDomainID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
