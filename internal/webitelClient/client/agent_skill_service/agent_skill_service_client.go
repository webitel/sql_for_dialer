// Code generated by go-swagger; DO NOT EDIT.

package agent_skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAgentSkill(params *CreateAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentSkillOK, error)

	DeleteAgentSkill(params *DeleteAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentSkillOK, error)

	PatchAgentSkill(params *PatchAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentSkillOK, error)

	ReadAgentSkill(params *ReadAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentSkillOK, error)

	SearchAgentSkill(params *SearchAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentSkillOK, error)

	SearchLookupAgentNotExistsSkill(params *SearchLookupAgentNotExistsSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchLookupAgentNotExistsSkillOK, error)

	UpdateAgentSkill(params *UpdateAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAgentSkill creates agent skill
*/
func (a *Client) CreateAgentSkill(params *CreateAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgentSkill",
		Method:             "POST",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgentSkill removes agent skill
*/
func (a *Client) DeleteAgentSkill(params *DeleteAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgentSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAgentSkill patch agent skill API
*/
func (a *Client) PatchAgentSkill(params *PatchAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgentSkill",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAgentSkill agents skill item
*/
func (a *Client) ReadAgentSkill(params *ReadAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgentSkill",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAgentSkill lists of agent skill
*/
func (a *Client) SearchAgentSkill(params *SearchAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentSkill",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchLookupAgentNotExistsSkill searches lookup agent not exists skill
*/
func (a *Client) SearchLookupAgentNotExistsSkill(params *SearchLookupAgentNotExistsSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchLookupAgentNotExistsSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLookupAgentNotExistsSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchLookupAgentNotExistsSkill",
		Method:             "GET",
		PathPattern:        "/call_center/lookups/agents/skills/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchLookupAgentNotExistsSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLookupAgentNotExistsSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchLookupAgentNotExistsSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAgentSkill updates agent skill
*/
func (a *Client) UpdateAgentSkill(params *UpdateAgentSkillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAgentSkillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAgentSkillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAgentSkill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
