// Code generated by go-swagger; DO NOT EDIT.

package agent_team_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// CreateAgentTeamReader is a Reader for the CreateAgentTeam structure.
type CreateAgentTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAgentTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateAgentTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCreateAgentTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateAgentTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateAgentTeamOK creates a CreateAgentTeamOK with default headers values
func NewCreateAgentTeamOK() *CreateAgentTeamOK {
	return &CreateAgentTeamOK{}
}

/* CreateAgentTeamOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateAgentTeamOK struct {
	Payload *models.EngineAgentTeam
}

func (o *CreateAgentTeamOK) Error() string {
	return fmt.Sprintf("[POST /call_center/teams][%d] createAgentTeamOK  %+v", 200, o.Payload)
}
func (o *CreateAgentTeamOK) GetPayload() *models.EngineAgentTeam {
	return o.Payload
}

func (o *CreateAgentTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineAgentTeam)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAgentTeamForbidden creates a CreateAgentTeamForbidden with default headers values
func NewCreateAgentTeamForbidden() *CreateAgentTeamForbidden {
	return &CreateAgentTeamForbidden{}
}

/* CreateAgentTeamForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type CreateAgentTeamForbidden struct {
	Payload interface{}
}

func (o *CreateAgentTeamForbidden) Error() string {
	return fmt.Sprintf("[POST /call_center/teams][%d] createAgentTeamForbidden  %+v", 403, o.Payload)
}
func (o *CreateAgentTeamForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateAgentTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAgentTeamNotFound creates a CreateAgentTeamNotFound with default headers values
func NewCreateAgentTeamNotFound() *CreateAgentTeamNotFound {
	return &CreateAgentTeamNotFound{}
}

/* CreateAgentTeamNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type CreateAgentTeamNotFound struct {
	Payload string
}

func (o *CreateAgentTeamNotFound) Error() string {
	return fmt.Sprintf("[POST /call_center/teams][%d] createAgentTeamNotFound  %+v", 404, o.Payload)
}
func (o *CreateAgentTeamNotFound) GetPayload() string {
	return o.Payload
}

func (o *CreateAgentTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
