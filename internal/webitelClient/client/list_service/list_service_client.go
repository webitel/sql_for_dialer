// Code generated by go-swagger; DO NOT EDIT.

package list_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new list service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for list service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateList(params *CreateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateListOK, error)

	CreateListCommunication(params *CreateListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateListCommunicationOK, error)

	DeleteList(params *DeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteListOK, error)

	DeleteListCommunication(params *DeleteListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteListCommunicationOK, error)

	ReadList(params *ReadListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadListOK, error)

	ReadListCommunication(params *ReadListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadListCommunicationOK, error)

	SearchList(params *SearchListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchListOK, error)

	SearchListCommunication(params *SearchListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchListCommunicationOK, error)

	UpdateList(params *UpdateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateListOK, error)

	UpdateListCommunication(params *UpdateListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateListCommunicationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateList creates list
*/
func (a *Client) CreateList(params *CreateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateList",
		Method:             "POST",
		PathPattern:        "/call_center/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateListCommunication creates list communication
*/
func (a *Client) CreateListCommunication(params *CreateListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateListCommunicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateListCommunication",
		Method:             "POST",
		PathPattern:        "/call_center/list/{list_id}/communication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateListCommunicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateListCommunication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteList removes list
*/
func (a *Client) DeleteList(params *DeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteList",
		Method:             "DELETE",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteListCommunication removes list communication
*/
func (a *Client) DeleteListCommunication(params *DeleteListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteListCommunicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteListCommunication",
		Method:             "DELETE",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteListCommunicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteListCommunication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadList lists item
*/
func (a *Client) ReadList(params *ReadListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadList",
		Method:             "GET",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadListCommunication lists item
*/
func (a *Client) ReadListCommunication(params *ReadListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadListCommunicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadListCommunication",
		Method:             "GET",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadListCommunicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadListCommunication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchList lists of list
*/
func (a *Client) SearchList(params *SearchListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchList",
		Method:             "GET",
		PathPattern:        "/call_center/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchListCommunication lists of list
*/
func (a *Client) SearchListCommunication(params *SearchListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchListCommunicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchListCommunication",
		Method:             "GET",
		PathPattern:        "/call_center/list/{list_id}/communication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchListCommunicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchListCommunication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateList updates list
*/
func (a *Client) UpdateList(params *UpdateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateList",
		Method:             "PUT",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateListCommunication updates list communication
*/
func (a *Client) UpdateListCommunication(params *UpdateListCommunicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateListCommunicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateListCommunication",
		Method:             "PUT",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateListCommunicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateListCommunication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
