// Code generated by go-swagger; DO NOT EDIT.

package queue_bucket_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queue bucket service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue bucket service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueueBucket(params *CreateQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueBucketOK, error)

	DeleteQueueBucket(params *DeleteQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueBucketOK, error)

	ReadQueueBucket(params *ReadQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueBucketOK, error)

	SearchQueueBucket(params *SearchQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueBucketOK, error)

	UpdateQueueBucket(params *UpdateQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueBucketOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateQueueBucket creates queue bucket
*/
func (a *Client) CreateQueueBucket(params *CreateQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueueBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueueBucket",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateQueueBucketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateQueueBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQueueBucket deletes queue routing
*/
func (a *Client) DeleteQueueBucket(params *DeleteQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueueBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueueBucket",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/buckets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueueBucketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteQueueBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadQueueBucket reads queue routing
*/
func (a *Client) ReadQueueBucket(params *ReadQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadQueueBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueueBucket",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/buckets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadQueueBucketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadQueueBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchQueueBucket searches queue routing
*/
func (a *Client) SearchQueueBucket(params *SearchQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQueueBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueBucket",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQueueBucketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchQueueBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateQueueBucket updates queue bucket
*/
func (a *Client) UpdateQueueBucket(params *UpdateQueueBucketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQueueBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueueBucket",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{queue_id}/buckets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQueueBucketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateQueueBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
