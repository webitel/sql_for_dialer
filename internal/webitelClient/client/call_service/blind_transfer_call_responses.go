// Code generated by go-swagger; DO NOT EDIT.

package call_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// BlindTransferCallReader is a Reader for the BlindTransferCall structure.
type BlindTransferCallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BlindTransferCallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBlindTransferCallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewBlindTransferCallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBlindTransferCallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBlindTransferCallOK creates a BlindTransferCallOK with default headers values
func NewBlindTransferCallOK() *BlindTransferCallOK {
	return &BlindTransferCallOK{}
}

/* BlindTransferCallOK describes a response with status code 200, with default header values.

A successful response.
*/
type BlindTransferCallOK struct {
	Payload models.EngineBlindTransferCallResponse
}

func (o *BlindTransferCallOK) Error() string {
	return fmt.Sprintf("[PATCH /calls/active/{id}/transfer][%d] blindTransferCallOK  %+v", 200, o.Payload)
}
func (o *BlindTransferCallOK) GetPayload() models.EngineBlindTransferCallResponse {
	return o.Payload
}

func (o *BlindTransferCallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlindTransferCallForbidden creates a BlindTransferCallForbidden with default headers values
func NewBlindTransferCallForbidden() *BlindTransferCallForbidden {
	return &BlindTransferCallForbidden{}
}

/* BlindTransferCallForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type BlindTransferCallForbidden struct {
	Payload interface{}
}

func (o *BlindTransferCallForbidden) Error() string {
	return fmt.Sprintf("[PATCH /calls/active/{id}/transfer][%d] blindTransferCallForbidden  %+v", 403, o.Payload)
}
func (o *BlindTransferCallForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *BlindTransferCallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlindTransferCallNotFound creates a BlindTransferCallNotFound with default headers values
func NewBlindTransferCallNotFound() *BlindTransferCallNotFound {
	return &BlindTransferCallNotFound{}
}

/* BlindTransferCallNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type BlindTransferCallNotFound struct {
	Payload string
}

func (o *BlindTransferCallNotFound) Error() string {
	return fmt.Sprintf("[PATCH /calls/active/{id}/transfer][%d] blindTransferCallNotFound  %+v", 404, o.Payload)
}
func (o *BlindTransferCallNotFound) GetPayload() string {
	return o.Payload
}

func (o *BlindTransferCallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
