// Code generated by go-swagger; DO NOT EDIT.

package call_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new call service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for call service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregateHistoryCall(params *AggregateHistoryCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AggregateHistoryCallOK, error)

	BlindTransferCall(params *BlindTransferCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BlindTransferCallOK, error)

	CreateCall(params *CreateCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCallOK, error)

	DtmfCall(params *DtmfCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DtmfCallOK, error)

	EavesdropCall(params *EavesdropCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EavesdropCallOK, error)

	HangupCall(params *HangupCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HangupCallOK, error)

	HoldCall(params *HoldCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HoldCallOK, error)

	ReadCall(params *ReadCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadCallOK, error)

	SearchActiveCall(params *SearchActiveCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchActiveCallOK, error)

	SearchHistoryCall(params *SearchHistoryCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchHistoryCallOK, error)

	UnHoldCall(params *UnHoldCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnHoldCallOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AggregateHistoryCall aggregate history call API
*/
func (a *Client) AggregateHistoryCall(params *AggregateHistoryCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AggregateHistoryCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateHistoryCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateHistoryCall",
		Method:             "POST",
		PathPattern:        "/calls/history/aggregate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AggregateHistoryCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateHistoryCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateHistoryCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BlindTransferCall blind transfer call API
*/
func (a *Client) BlindTransferCall(params *BlindTransferCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BlindTransferCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBlindTransferCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BlindTransferCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BlindTransferCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BlindTransferCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BlindTransferCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCall creates e call
*/
func (a *Client) CreateCall(params *CreateCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCall",
		Method:             "POST",
		PathPattern:        "/calls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DtmfCall dtmf call API
*/
func (a *Client) DtmfCall(params *DtmfCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DtmfCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDtmfCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DtmfCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/dtmf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DtmfCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DtmfCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DtmfCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EavesdropCall eavesdrop call API
*/
func (a *Client) EavesdropCall(params *EavesdropCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EavesdropCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEavesdropCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EavesdropCall",
		Method:             "POST",
		PathPattern:        "/calls/active/{id}/eavesdrop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EavesdropCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EavesdropCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EavesdropCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HangupCall hangup call API
*/
func (a *Client) HangupCall(params *HangupCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HangupCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHangupCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HangupCall",
		Method:             "DELETE",
		PathPattern:        "/calls/active/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HangupCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HangupCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HangupCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HoldCall hold call API
*/
func (a *Client) HoldCall(params *HoldCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HoldCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHoldCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/hold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HoldCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HoldCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCall calls item
*/
func (a *Client) ReadCall(params *ReadCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCall",
		Method:             "GET",
		PathPattern:        "/calls/active/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchActiveCall search active call API
*/
func (a *Client) SearchActiveCall(params *SearchActiveCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchActiveCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchActiveCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchActiveCall",
		Method:             "GET",
		PathPattern:        "/calls/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchActiveCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchActiveCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchActiveCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchHistoryCall lists of call
*/
func (a *Client) SearchHistoryCall(params *SearchHistoryCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchHistoryCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchHistoryCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchHistoryCall",
		Method:             "GET",
		PathPattern:        "/calls/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchHistoryCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchHistoryCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchHistoryCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnHoldCall un hold call API
*/
func (a *Client) UnHoldCall(params *UnHoldCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnHoldCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnHoldCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnHoldCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/unhold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnHoldCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnHoldCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnHoldCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
