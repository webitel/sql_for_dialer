// Code generated by go-swagger; DO NOT EDIT.

package outbound_resource_group_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new outbound resource group service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for outbound resource group service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOutboundResourceGroup(params *CreateOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error)

	CreateOutboundResourceInGroup(params *CreateOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error)

	DeleteOutboundResourceGroup(params *DeleteOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutboundResourceGroupOK, error)

	DeleteOutboundResourceInGroup(params *DeleteOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutboundResourceInGroupOK, error)

	ReadOutboundResourceGroup(params *ReadOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadOutboundResourceGroupOK, error)

	ReadOutboundResourceInGroup(params *ReadOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadOutboundResourceInGroupOK, error)

	SearchOutboundResourceGroup(params *SearchOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOutboundResourceGroupOK, error)

	SearchOutboundResourceInGroup(params *SearchOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOutboundResourceInGroupOK, error)

	UpdateOutboundResourceGroup(params *UpdateOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error)

	UpdateOutboundResourceInGroup(params *UpdateOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOutboundResourceInGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOutboundResourceGroup creates outbound resource group
*/
func (a *Client) CreateOutboundResourceGroup(params *CreateOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceGroup",
		Method:             "POST",
		PathPattern:        "/call_center/resource_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOutboundResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOutboundResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOutboundResourceInGroup creates outbound resource group
*/
func (a *Client) CreateOutboundResourceInGroup(params *CreateOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceInGroup",
		Method:             "POST",
		PathPattern:        "/call_center/resource_group/{group_id}/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOutboundResourceInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOutboundResourceInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOutboundResourceGroup removes outbound resource group
*/
func (a *Client) DeleteOutboundResourceGroup(params *DeleteOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutboundResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceGroup",
		Method:             "DELETE",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOutboundResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOutboundResourceInGroup removes outbound resource in group
*/
func (a *Client) DeleteOutboundResourceInGroup(params *DeleteOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutboundResourceInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceInGroup",
		Method:             "DELETE",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOutboundResourceInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadOutboundResourceGroup outbounds resource group item
*/
func (a *Client) ReadOutboundResourceGroup(params *ReadOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadOutboundResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResourceGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadOutboundResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadOutboundResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadOutboundResourceInGroup outbounds resource in group item
*/
func (a *Client) ReadOutboundResourceInGroup(params *ReadOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadOutboundResourceInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResourceInGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadOutboundResourceInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadOutboundResourceInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchOutboundResourceGroup lists of outbound resource group
*/
func (a *Client) SearchOutboundResourceGroup(params *SearchOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOutboundResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResourceGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchOutboundResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchOutboundResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchOutboundResourceInGroup lists of outbound resource in group
*/
func (a *Client) SearchOutboundResourceInGroup(params *SearchOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOutboundResourceInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResourceInGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{group_id}/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchOutboundResourceInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchOutboundResourceInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOutboundResourceGroup updates outbound resource group
*/
func (a *Client) UpdateOutboundResourceGroup(params *UpdateOutboundResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResourceGroup",
		Method:             "PUT",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateOutboundResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOutboundResourceInGroup updates outbound resource in group
*/
func (a *Client) UpdateOutboundResourceInGroup(params *UpdateOutboundResourceInGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOutboundResourceInGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResourceInGroup",
		Method:             "PUT",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateOutboundResourceInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
