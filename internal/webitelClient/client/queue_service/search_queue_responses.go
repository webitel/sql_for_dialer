// Code generated by go-swagger; DO NOT EDIT.

package queue_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// SearchQueueReader is a Reader for the SearchQueue structure.
type SearchQueueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchQueueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchQueueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSearchQueueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchQueueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchQueueOK creates a SearchQueueOK with default headers values
func NewSearchQueueOK() *SearchQueueOK {
	return &SearchQueueOK{}
}

/* SearchQueueOK describes a response with status code 200, with default header values.

A successful response.
*/
type SearchQueueOK struct {
	Payload *models.EngineListQueue
}

func (o *SearchQueueOK) Error() string {
	return fmt.Sprintf("[GET /call_center/queues][%d] searchQueueOK  %+v", 200, o.Payload)
}
func (o *SearchQueueOK) GetPayload() *models.EngineListQueue {
	return o.Payload
}

func (o *SearchQueueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineListQueue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchQueueForbidden creates a SearchQueueForbidden with default headers values
func NewSearchQueueForbidden() *SearchQueueForbidden {
	return &SearchQueueForbidden{}
}

/* SearchQueueForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type SearchQueueForbidden struct {
	Payload interface{}
}

func (o *SearchQueueForbidden) Error() string {
	return fmt.Sprintf("[GET /call_center/queues][%d] searchQueueForbidden  %+v", 403, o.Payload)
}
func (o *SearchQueueForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SearchQueueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchQueueNotFound creates a SearchQueueNotFound with default headers values
func NewSearchQueueNotFound() *SearchQueueNotFound {
	return &SearchQueueNotFound{}
}

/* SearchQueueNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type SearchQueueNotFound struct {
	Payload string
}

func (o *SearchQueueNotFound) Error() string {
	return fmt.Sprintf("[GET /call_center/queues][%d] searchQueueNotFound  %+v", 404, o.Payload)
}
func (o *SearchQueueNotFound) GetPayload() string {
	return o.Payload
}

func (o *SearchQueueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
