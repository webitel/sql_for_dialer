// Code generated by go-swagger; DO NOT EDIT.

package queue_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queue service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueue(params *CreateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueOK, error)

	DeleteQueue(params *DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueOK, error)

	PatchQueue(params *PatchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueOK, error)

	ReadQueue(params *ReadQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueOK, error)

	SearchQueue(params *SearchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueOK, error)

	SearchQueueReportGeneral(params *SearchQueueReportGeneralParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueReportGeneralOK, error)

	UpdateQueue(params *UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateQueue creates queue
*/
func (a *Client) CreateQueue(params *CreateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueue",
		Method:             "POST",
		PathPattern:        "/call_center/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQueue removes queue
*/
func (a *Client) DeleteQueue(params *DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueue",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchQueue patches queue
*/
func (a *Client) PatchQueue(params *PatchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueue",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadQueue queues item
*/
func (a *Client) ReadQueue(params *ReadQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueue",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchQueue lists of queue
*/
func (a *Client) SearchQueue(params *SearchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueue",
		Method:             "GET",
		PathPattern:        "/call_center/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchQueueReportGeneral search queue report general API
*/
func (a *Client) SearchQueueReportGeneral(params *SearchQueueReportGeneralParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueReportGeneralOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQueueReportGeneralParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueReportGeneral",
		Method:             "GET",
		PathPattern:        "/call_center/queues/reports/general",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQueueReportGeneralReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueReportGeneralOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchQueueReportGeneral: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateQueue updates queue
*/
func (a *Client) UpdateQueue(params *UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueue",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
