// Code generated by go-swagger; DO NOT EDIT.

package calendar_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new calendar service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for calendar service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCalendar(params *CreateCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCalendarOK, error)

	DeleteCalendar(params *DeleteCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCalendarOK, error)

	ReadCalendar(params *ReadCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadCalendarOK, error)

	SearchCalendar(params *SearchCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCalendarOK, error)

	SearchTimezones(params *SearchTimezonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTimezonesOK, error)

	UpdateCalendar(params *UpdateCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCalendarOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCalendar creates calendar
*/
func (a *Client) CreateCalendar(params *CreateCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCalendar",
		Method:             "POST",
		PathPattern:        "/calendars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCalendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCalendar removes calendar
*/
func (a *Client) DeleteCalendar(params *DeleteCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCalendar",
		Method:             "DELETE",
		PathPattern:        "/calendars/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCalendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCalendar calendars item
*/
func (a *Client) ReadCalendar(params *ReadCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCalendar",
		Method:             "GET",
		PathPattern:        "/calendars/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadCalendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchCalendar lists of calendar
*/
func (a *Client) SearchCalendar(params *SearchCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchCalendar",
		Method:             "GET",
		PathPattern:        "/calendars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchCalendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchTimezones lists timezones
*/
func (a *Client) SearchTimezones(params *SearchTimezonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTimezonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTimezonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTimezones",
		Method:             "GET",
		PathPattern:        "/calendars/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchTimezonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCalendar updates calendar
*/
func (a *Client) UpdateCalendar(params *UpdateCalendarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCalendarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCalendar",
		Method:             "PUT",
		PathPattern:        "/calendars/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCalendarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCalendar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
