// Code generated by go-swagger; DO NOT EDIT.

package queue_hook_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// CreateQueueHookReader is a Reader for the CreateQueueHook structure.
type CreateQueueHookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateQueueHookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateQueueHookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCreateQueueHookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateQueueHookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateQueueHookOK creates a CreateQueueHookOK with default headers values
func NewCreateQueueHookOK() *CreateQueueHookOK {
	return &CreateQueueHookOK{}
}

/* CreateQueueHookOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateQueueHookOK struct {
	Payload *models.EngineQueueHook
}

func (o *CreateQueueHookOK) Error() string {
	return fmt.Sprintf("[POST /call_center/queues/{queue_id}/hooks][%d] createQueueHookOK  %+v", 200, o.Payload)
}
func (o *CreateQueueHookOK) GetPayload() *models.EngineQueueHook {
	return o.Payload
}

func (o *CreateQueueHookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineQueueHook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueueHookForbidden creates a CreateQueueHookForbidden with default headers values
func NewCreateQueueHookForbidden() *CreateQueueHookForbidden {
	return &CreateQueueHookForbidden{}
}

/* CreateQueueHookForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type CreateQueueHookForbidden struct {
	Payload interface{}
}

func (o *CreateQueueHookForbidden) Error() string {
	return fmt.Sprintf("[POST /call_center/queues/{queue_id}/hooks][%d] createQueueHookForbidden  %+v", 403, o.Payload)
}
func (o *CreateQueueHookForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateQueueHookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueueHookNotFound creates a CreateQueueHookNotFound with default headers values
func NewCreateQueueHookNotFound() *CreateQueueHookNotFound {
	return &CreateQueueHookNotFound{}
}

/* CreateQueueHookNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type CreateQueueHookNotFound struct {
	Payload string
}

func (o *CreateQueueHookNotFound) Error() string {
	return fmt.Sprintf("[POST /call_center/queues/{queue_id}/hooks][%d] createQueueHookNotFound  %+v", 404, o.Payload)
}
func (o *CreateQueueHookNotFound) GetPayload() string {
	return o.Payload
}

func (o *CreateQueueHookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
