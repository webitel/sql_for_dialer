// Code generated by go-swagger; DO NOT EDIT.

package queue_hook_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queue hook service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue hook service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueueHook(params *CreateQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueHookOK, error)

	DeleteQueueHook(params *DeleteQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueHookOK, error)

	PatchQueueHook(params *PatchQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueHookOK, error)

	ReadQueueHook(params *ReadQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueHookOK, error)

	SearchQueueHook(params *SearchQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueHookOK, error)

	UpdateQueueHook(params *UpdateQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueHookOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateQueueHook create queue hook API
*/
func (a *Client) CreateQueueHook(params *CreateQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueueHook",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteQueueHook delete queue hook API
*/
func (a *Client) DeleteQueueHook(params *DeleteQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueueHook",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchQueueHook patch queue hook API
*/
func (a *Client) PatchQueueHook(params *PatchQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueueHook",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{queue_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadQueueHook read queue hook API
*/
func (a *Client) ReadQueueHook(params *ReadQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueueHook",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchQueueHook search queue hook API
*/
func (a *Client) SearchQueueHook(params *SearchQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueHook",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateQueueHook update queue hook API
*/
func (a *Client) UpdateQueueHook(params *UpdateQueueHookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQueueHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueueHook",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{queue_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQueueHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateQueueHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
