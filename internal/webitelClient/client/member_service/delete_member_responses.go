// Code generated by go-swagger; DO NOT EDIT.

package member_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/sql_for_dialer/internal/webitelClient/models"
)

// DeleteMemberReader is a Reader for the DeleteMember structure.
type DeleteMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteMemberOK creates a DeleteMemberOK with default headers values
func NewDeleteMemberOK() *DeleteMemberOK {
	return &DeleteMemberOK{}
}

/* DeleteMemberOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteMemberOK struct {
	Payload *models.EngineMemberInQueue
}

func (o *DeleteMemberOK) Error() string {
	return fmt.Sprintf("[DELETE /call_center/queues/{queue_id}/members/{id}][%d] deleteMemberOK  %+v", 200, o.Payload)
}
func (o *DeleteMemberOK) GetPayload() *models.EngineMemberInQueue {
	return o.Payload
}

func (o *DeleteMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineMemberInQueue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMemberForbidden creates a DeleteMemberForbidden with default headers values
func NewDeleteMemberForbidden() *DeleteMemberForbidden {
	return &DeleteMemberForbidden{}
}

/* DeleteMemberForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type DeleteMemberForbidden struct {
	Payload interface{}
}

func (o *DeleteMemberForbidden) Error() string {
	return fmt.Sprintf("[DELETE /call_center/queues/{queue_id}/members/{id}][%d] deleteMemberForbidden  %+v", 403, o.Payload)
}
func (o *DeleteMemberForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMemberNotFound creates a DeleteMemberNotFound with default headers values
func NewDeleteMemberNotFound() *DeleteMemberNotFound {
	return &DeleteMemberNotFound{}
}

/* DeleteMemberNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type DeleteMemberNotFound struct {
	Payload string
}

func (o *DeleteMemberNotFound) Error() string {
	return fmt.Sprintf("[DELETE /call_center/queues/{queue_id}/members/{id}][%d] deleteMemberNotFound  %+v", 404, o.Payload)
}
func (o *DeleteMemberNotFound) GetPayload() string {
	return o.Payload
}

func (o *DeleteMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
