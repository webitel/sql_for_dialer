// Code generated by go-swagger; DO NOT EDIT.

package member_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new member service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for member service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AttemptCallback(params *AttemptCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttemptCallbackOK, error)

	AttemptResult(params *AttemptResultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttemptResultOK, error)

	CreateAttempt(params *CreateAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAttemptOK, error)

	CreateMember(params *CreateMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMemberOK, error)

	CreateMemberBulk(params *CreateMemberBulkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMemberBulkOK, error)

	DeleteMember(params *DeleteMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMemberOK, error)

	DeleteMembers(params *DeleteMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMembersOK, error)

	PatchMember(params *PatchMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchMemberOK, error)

	ReadMember(params *ReadMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadMemberOK, error)

	SearchAttempts(params *SearchAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAttemptsOK, error)

	SearchAttemptsHistory(params *SearchAttemptsHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAttemptsHistoryOK, error)

	SearchMemberAttempts(params *SearchMemberAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMemberAttemptsOK, error)

	SearchMemberInQueue(params *SearchMemberInQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMemberInQueueOK, error)

	SearchMembers(params *SearchMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMembersOK, error)

	UpdateMember(params *UpdateMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMemberOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AttemptCallback attempt callback API
*/
func (a *Client) AttemptCallback(params *AttemptCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttemptCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttemptCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AttemptCallback",
		Method:             "PATCH",
		PathPattern:        "/call_center/attempts/{attempt_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttemptCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttemptCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AttemptCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttemptResult attempt result API
*/
func (a *Client) AttemptResult(params *AttemptResultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttemptResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttemptResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AttemptResult",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttemptResultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttemptResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AttemptResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAttempt offlines queue
*/
func (a *Client) CreateAttempt(params *CreateAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAttemptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAttemptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAttempt",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/members/{member_id}/attempts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAttemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAttemptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAttempt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMember creates member
*/
func (a *Client) CreateMember(params *CreateMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMember",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMemberBulk creates member
*/
func (a *Client) CreateMemberBulk(params *CreateMemberBulkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMemberBulkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMemberBulkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMemberBulk",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/members/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMemberBulkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMemberBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMemberBulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMember deletes member
*/
func (a *Client) DeleteMember(params *DeleteMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMember",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/members/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMembers deletes members
*/
func (a *Client) DeleteMembers(params *DeleteMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMembers",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchMember patches member
*/
func (a *Client) PatchMember(params *PatchMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchMember",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{queue_id}/members/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadMember reads queue routing
*/
func (a *Client) ReadMember(params *ReadMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMember",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/members/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAttempts searches attempts
*/
func (a *Client) SearchAttempts(params *SearchAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAttemptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAttemptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAttempts",
		Method:             "GET",
		PathPattern:        "/call_center/queues/attempts/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAttemptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAttemptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAttempts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAttemptsHistory searches member attempts
*/
func (a *Client) SearchAttemptsHistory(params *SearchAttemptsHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAttemptsHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAttemptsHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAttemptsHistory",
		Method:             "GET",
		PathPattern:        "/call_center/queues/attempts/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchAttemptsHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAttemptsHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAttemptsHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchMemberAttempts searches member attempts
*/
func (a *Client) SearchMemberAttempts(params *SearchMemberAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMemberAttemptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMemberAttemptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchMemberAttempts",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/members/{member_id}/attempts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchMemberAttemptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMemberAttemptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchMemberAttempts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchMemberInQueue lists of member
*/
func (a *Client) SearchMemberInQueue(params *SearchMemberInQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMemberInQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMemberInQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchMemberInQueue",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchMemberInQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMemberInQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchMemberInQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchMembers searches of member
*/
func (a *Client) SearchMembers(params *SearchMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchMembers",
		Method:             "GET",
		PathPattern:        "/call_center/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMember updates member
*/
func (a *Client) UpdateMember(params *UpdateMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMember",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{queue_id}/members/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
